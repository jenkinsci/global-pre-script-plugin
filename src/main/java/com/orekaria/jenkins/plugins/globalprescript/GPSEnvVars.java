package com.orekaria.jenkins.plugins.globalprescript;

import groovy.lang.Binding;
import hudson.AbortException;
import hudson.model.AbstractProject;
import hudson.model.BuildListener;
import hudson.model.Item;
import hudson.model.Run;
import jenkins.model.Jenkins;
import org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

public class GPSEnvVars {

    /**
     * Executes the {@link SecureGroovyScript} and returns a map generated by the script/
     *
     * @param logger   a logger
     * @param listener a listener
     * @param script   the script
     * @param envVars  any variables to bind to the script's context
     * @return the map
     * @throws Exception      for any exceptions generated by the script execution
     * @throws AbortException if something is badly wrong.
     */
    @Nonnull
    @Restricted(NoExternalUse.class)
    public Map<String, String> executeGroovyScript(
            @Nonnull PrintStream logger,
            @Nonnull BuildListener listener,
            @CheckForNull SecureGroovyScript script,
            @Nonnull Map<String, String> envVars
    ) throws Exception, AbortException {

        final Jenkins jenkins = Jenkins.get();

        if (script == null) {
            return new HashMap<String, String>();
        }

        if (script.getScript().trim().length() == 0) {
            return new HashMap<String, String>();
        }

        logger.println(String.format("%s: start", GPSListener.APP_NAME));

        Binding binding = new Binding();
        String jobName = envVars.get("JOB_NAME");
        if (jobName != null) {
            Item job = jenkins.getItemByFullName(jobName);
            binding.setProperty("currentJob", job);
            String b = envVars.get("BUILD_NUMBER");
            //TODO: Use Job instead
            if (b != null && job instanceof AbstractProject) {
                Run r = ((AbstractProject) job).getBuild(b);
                binding.setProperty("currentBuild", r);
            }
        }

        for (Map.Entry<String, String> entryVariable : envVars.entrySet()) {
            binding.setVariable(entryVariable.getKey(), entryVariable.getValue());
        }
        binding.setVariable("out", logger);
        binding.setVariable("currentListener", listener);

        final Object groovyResult;
        try {
            groovyResult = script.evaluate(jenkins.getPluginManager().uberClassLoader, binding);
        } catch (Exception e) {
            String message = String.format("%s: ERROR: %s", GPSListener.APP_NAME, e.getMessage());
            StackTraceElement[] elements = e.getStackTrace();
            for (int i = 1; i < elements.length; i++) {
                StackTraceElement s = elements[i];
                if (s.getClassName().equals("Script1") && s.getMethodName().equals("run")) {
                    message = String.format("%s in line %s", message, s.getLineNumber());
                    break;
                }
            }
            throw new Exception(message, e);
        }
        if (groovyResult != null && !(groovyResult instanceof Map)) {
            throw new AbortException(String.format("%s: the script must return a Map object", GPSListener.APP_NAME));
        }

        Map<String, String> result = new HashMap<String, String>();
        if (groovyResult == null) {
            return result;
        }
        Map<?, ?> mapResult = (Map<?, ?>) groovyResult;
        for (Map.Entry<?, ?> entry : mapResult.entrySet()) {
            result.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));
        }

        logger.println(String.format("%s: end", GPSListener.APP_NAME));

        return result;
    }
}
